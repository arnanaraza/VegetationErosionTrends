outdir <- paste0(main.dir,outdir)
r.list <- list()
lf <- list.files(outdir,satellite)
omit <- c('aux', paste0(rsl, 'm')) #omit aux and vrt file
t <- unique(grep(paste(omit,collapse="|"), lf, value=T))
l <- setdiff(lf,t)
l <- length(l)#for interrupted downloads
if (nrow(aoi) == l){
idx <- l}else{idx <- l + 1}
for (i in idx:length(aoi)){
dsn <-paste0(outdir,  satellite, '_', i)
print(dsn)
a <- aoi[i,]@bbox
g <- c(a[1],a[2],a[3],a[4])
geometry <- ee$Geometry$Rectangle(
coords = g,
proj = "EPSG:4326",
geodesic = FALSE)
ee_raster <- ee_as_raster(
image = img,
region = geometry,
dsn = dsn,
scale = rsl,
via = "getInfo",
maxPixels=1e+100)
r.list <- c(r.list, ee_raster)
}
return(r.list)
}
#download RS inputs in blocks
landsat_yrs <- c(2000:2014)
plt <- read.csv(paste0(main.dir,'data/td.03.ha.csv')) #assuming point data (and not polygons) are available
coordinates(plt) <- ~long+lat
source(paste0(main.dir,'scripts/MakeBlockPolygon.R')) #point to square polygon function
aoi <- MakeBlockPolygon(plt, 0.01, 2) #10x10km blocks
TS_Values <- function(plt=plt,country='AFR',yrs=landsat_yrs,satellite='LANDSAT',rsl=100,aoi=aoi){
# mosaic and make vrt
TS <- function(country, yr, satellite){
folder_dir <- paste0(country,'_',yr,'_',rsl,'m')
setwd(paste0(main.dir, 'intermediate/',folder_dir))
r_files <- list.files(getwd(), satellite)
r_files <- r_files[!grepl('vrt|aux', r_files)]
fname <- paste0(folder_dir,'_',satellite,".vrt")
gdalbuildvrt(gdalfile = r_files, # uses all tiffs in the current folder
output.vrt = fname, overwrite=T)
brick(fname)
}
# raster brick of all block data at regional scale
mosaic_l <- lapply(landsat_yrs, function(x) TS(country,x, satellite))
if(satellite == 'LANDSAT'){
bnames <- c('ndvi')
}
mosaic_l <- lapply(mosaic_l, setNames, nm = bnames)   #stack of aoi yearly mosaic!
mosaic_l <- lapply(mosaic_l, function(x) crop(x, aoi))
mosaic_l <- lapply(mosaic_l, function(x) mask(x, aoi))
#plot-level valuetable assembly
val <- lapply(1:length(mosaic_l),  #should extract all years for all points!
function(x) extract(mosaic_l[[x]], plt))
yrs_rep <- do.call(rbind, replicate(nrow(plt), coredata(as.data.frame(landsat_yrs)),
simplify = FALSE))
ts_rep <- do.call(rbind, replicate(length(mosaic_l),
coredata(plt), simplify = FALSE))
#add temporal covs of plot time series data
YearlyStack <- function(r_list,b){
bnd <- lapply(r_list, function(x) stack(x[[b]]))
bnd1 <- do.call(stack, bnd)
nc <- detectCores()
cl <- makeCluster(nc-1)
registerDoParallel(cl, nc)
stat <- foreach(i=1:nrow(aoi), .combine='merge', .errorhandling = 'remove',
.packages='raster', .export='aoi') %dopar% {
bnd_s <- crop(bnd1, aoi[i,]) ###!!!
time <- 1:nlayers(bnd_s)
lmod <- function(x) { lm(x ~ time)$coefficients[2] }
stack(calc(bnd_s, fun = mean, na.rm = T),calc(bnd_s, fun = min, na.rm = T),
calc(bnd_s, fun = max, na.rm = T),calc(bnd_s, fun = sd, na.rm = T),
calc(bnd_s, fun = lmod)) ### too much NA pixels!
}
stopCluster(cl)
names(stat)
if (b==5){names(stat) <- c('nbr_mean', 'nbr_min', 'nbr_max', 'nbr_sd','nbr_slp')}
if(b==6){names(stat) <- c('ndvi_mean', 'ndvi_min', 'ndvi_max', 'ndvi_sd', 'ndvi_slp')}
if(b==7){names(stat) <- c('nbmi_mean', 'ndmi_min', 'ndmi_max', 'ndmi_sd', 'ndmi_slp')}
return(stat)
}
start.time <- Sys.time()
stats_l <- lapply(5:7, function(x) YearlyStack(mosaic_l,x)) #stats of ndvi
end.time <- Sys.time()
print(end.time - start.time)
ndvi_temp <- do.call(rbind, replicate(length(landsat_yrs), coredata(extract(stats_l[[2]], plt)),
simplify = FALSE))
#make one data frame
vt <- data.frame(ts_rep, ldply(val,data.frame),yrs_rep, ndvi_temp)
covs <- lapply(mosaic_l, function(x)
stack(x,stats_l[[1]],stats_l[[2]],stats_l[[3]]))
bnames <- c("ndvi","ndvi_mean", "ndvi_min", "ndvi_max","ndvi_sd" , "ndvi_slp")
covs <- lapply(covs, setNames, nm = bnames)
list(covs, vt)
}
vtCovs <- TS_Values(plt,'PH_NFI',landsat_yrs,'LANDSAT',100, aoi)
TS_Values <- function(plt=plt,country='AFR',yrs=landsat_yrs,satellite='LANDSAT',rsl=100,aoi=aoi){
# mosaic and make vrt
TS <- function(country, yr, satellite){
folder_dir <- paste0(country,'_',yr,'_',rsl,'m')
setwd(paste0(main.dir, 'results/',folder_dir))
r_files <- list.files(getwd(), satellite)
r_files <- r_files[!grepl('vrt|aux', r_files)]
fname <- paste0(folder_dir,'_',satellite,".vrt")
gdalbuildvrt(gdalfile = r_files, # uses all tiffs in the current folder
output.vrt = fname, overwrite=T)
brick(fname)
}
# raster brick of all block data at regional scale
mosaic_l <- lapply(landsat_yrs, function(x) TS(country,x, satellite))
if(satellite == 'LANDSAT'){
bnames <- c('ndvi')
}
mosaic_l <- lapply(mosaic_l, setNames, nm = bnames)   #stack of aoi yearly mosaic!
mosaic_l <- lapply(mosaic_l, function(x) crop(x, aoi))
mosaic_l <- lapply(mosaic_l, function(x) mask(x, aoi))
#plot-level valuetable assembly
val <- lapply(1:length(mosaic_l),  #should extract all years for all points!
function(x) extract(mosaic_l[[x]], plt))
yrs_rep <- do.call(rbind, replicate(nrow(plt), coredata(as.data.frame(landsat_yrs)),
simplify = FALSE))
ts_rep <- do.call(rbind, replicate(length(mosaic_l),
coredata(plt), simplify = FALSE))
#add temporal covs of plot time series data
YearlyStack <- function(r_list,b){
bnd <- lapply(r_list, function(x) stack(x[[b]]))
bnd1 <- do.call(stack, bnd)
nc <- detectCores()
cl <- makeCluster(nc-1)
registerDoParallel(cl, nc)
stat <- foreach(i=1:nrow(aoi), .combine='merge', .errorhandling = 'remove',
.packages='raster', .export='aoi') %dopar% {
bnd_s <- crop(bnd1, aoi[i,]) ###!!!
time <- 1:nlayers(bnd_s)
lmod <- function(x) { lm(x ~ time)$coefficients[2] }
stack(calc(bnd_s, fun = mean, na.rm = T),calc(bnd_s, fun = min, na.rm = T),
calc(bnd_s, fun = max, na.rm = T),calc(bnd_s, fun = sd, na.rm = T),
calc(bnd_s, fun = lmod)) ### too much NA pixels!
}
stopCluster(cl)
names(stat)
if (b==5){names(stat) <- c('nbr_mean', 'nbr_min', 'nbr_max', 'nbr_sd','nbr_slp')}
if(b==6){names(stat) <- c('ndvi_mean', 'ndvi_min', 'ndvi_max', 'ndvi_sd', 'ndvi_slp')}
if(b==7){names(stat) <- c('nbmi_mean', 'ndmi_min', 'ndmi_max', 'ndmi_sd', 'ndmi_slp')}
return(stat)
}
start.time <- Sys.time()
stats_l <- lapply(5:7, function(x) YearlyStack(mosaic_l,x)) #stats of ndvi
end.time <- Sys.time()
print(end.time - start.time)
ndvi_temp <- do.call(rbind, replicate(length(landsat_yrs), coredata(extract(stats_l[[2]], plt)),
simplify = FALSE))
#make one data frame
vt <- data.frame(ts_rep, ldply(val,data.frame),yrs_rep, ndvi_temp)
covs <- lapply(mosaic_l, function(x)
stack(x,stats_l[[1]],stats_l[[2]],stats_l[[3]]))
bnames <- c("ndvi","ndvi_mean", "ndvi_min", "ndvi_max","ndvi_sd" , "ndvi_slp")
covs <- lapply(covs, setNames, nm = bnames)
list(covs, vt)
}
vtCovs <- TS_Values(plt,'PH_NFI',landsat_yrs,'LANDSAT',100, aoi)
pacman::p_load(rgdal,sf,raster,sf,plyr,dplyr,cptcity,bfast,devtools,remotes,zoo,
rgee,foreach,doParallel,rlist,gdalUtils,ranger)
vtCovs <- TS_Values(plt,'PH_NFI',landsat_yrs,'LANDSAT',100, aoi)
country='PH_NFI'
satellite='LANDSAT'
RSL=100
# raster brick of all block data at regional scale
mosaic_l <- lapply(landsat_yrs, function(x) TS(country,x, satellite))
# mosaic and make vrt
TS <- function(country, yr, satellite){
folder_dir <- paste0(country,'_',yr,'_',rsl,'m')
setwd(paste0(main.dir, 'results/',folder_dir))
r_files <- list.files(getwd(), satellite)
r_files <- r_files[!grepl('vrt|aux', r_files)]
fname <- paste0(folder_dir,'_',satellite,".vrt")
gdalbuildvrt(gdalfile = r_files, # uses all tiffs in the current folder
output.vrt = fname, overwrite=T)
brick(fname)
}
if(satellite == 'LANDSAT'){
bnames <- c('ndvi')
}
mosaic_l <- lapply(mosaic_l, setNames, nm = bnames)   #stack of aoi yearly mosaic!
mosaic_l <- lapply(mosaic_l, function(x) crop(x, aoi))
mosaic_l <- lapply(mosaic_l, function(x) mask(x, aoi))
# raster brick of all block data at regional scale
mosaic_l <- lapply(landsat_yrs, function(x) TS(country,x, satellite))
rsl
rsl=100
# raster brick of all block data at regional scale
mosaic_l <- lapply(landsat_yrs, function(x) TS(country,x, satellite))
if(satellite == 'LANDSAT'){
bnames <- c('ndvi')
}
mosaic_l <- lapply(mosaic_l, setNames, nm = bnames)   #stack of aoi yearly mosaic!
mosaic_l <- lapply(mosaic_l, function(x) crop(x, aoi))
mosaic_l <- lapply(mosaic_l, function(x) mask(x, aoi))
plot(mosaic_l[[1]])
#plot-level valuetable assembly
val <- lapply(1:length(mosaic_l),  #should extract all years for all points!
function(x) extract(mosaic_l[[x]], plt))
yrs_rep <- do.call(rbind, replicate(nrow(plt), coredata(as.data.frame(landsat_yrs)),
simplify = FALSE))
ts_rep <- do.call(rbind, replicate(length(mosaic_l),
coredata(plt), simplify = FALSE))
#add temporal covs of plot time series data
YearlyStack <- function(r_list,b){
bnd <- lapply(r_list, function(x) stack(x[[b]]))
bnd1 <- do.call(stack, bnd)
nc <- detectCores()
cl <- makeCluster(nc-1)
registerDoParallel(cl, nc)
stat <- foreach(i=1:nrow(aoi), .combine='merge', .errorhandling = 'remove',
.packages='raster', .export='aoi') %dopar% {
bnd_s <- crop(bnd1, aoi[i,]) ###!!!
time <- 1:nlayers(bnd_s)
lmod <- function(x) { lm(x ~ time)$coefficients[2] }
stack(calc(bnd_s, fun = mean, na.rm = T),calc(bnd_s, fun = min, na.rm = T),
calc(bnd_s, fun = max, na.rm = T),calc(bnd_s, fun = sd, na.rm = T),
calc(bnd_s, fun = lmod)) ### too much NA pixels!
}
stopCluster(cl)
names(stat)
if (b==5){names(stat) <- c('nbr_mean', 'nbr_min', 'nbr_max', 'nbr_sd','nbr_slp')}
if(b==6){names(stat) <- c('ndvi_mean', 'ndvi_min', 'ndvi_max', 'ndvi_sd', 'ndvi_slp')}
if(b==7){names(stat) <- c('nbmi_mean', 'ndmi_min', 'ndmi_max', 'ndmi_sd', 'ndmi_slp')}
return(stat)
}
start.time <- Sys.time()
stats_l <- lapply(5, function(x) YearlyStack(mosaic_l,x)) #stats of ndvi
start.time <- Sys.time()
stats_l <- lapply(1, function(x) YearlyStack(mosaic_l,x)) #stats of ndvi
end.time <- Sys.time()
print(end.time - start.time)
plot(stats_l[[1]])
ndvi_temp <- do.call(rbind, replicate(length(landsat_yrs), coredata(extract(stats_l[[1]], plt)),
simplify = FALSE))
#make one data frame
vt <- data.frame(ts_rep, ldply(val,data.frame),yrs_rep, ndvi_temp)
covs <- lapply(mosaic_l, function(x)
stack(x,stats_l[[1]],stats_l[[2]],stats_l[[3]]))
covs <- lapply(mosaic_l, function(x) stack(x,stats_l[[1]]))
bnames <- c("ndvi","ndvi_mean", "ndvi_min", "ndvi_max","ndvi_sd" , "ndvi_slp")
covs <- lapply(covs, setNames, nm = bnames)
vtCovs <- list(covs, vt)
covs <- vtCovs[[1]]
vt <- vtCovs[[2]]
y <-as.numeric(vt [,menu(names(vt), title="which column is the latitude")]) #11 10 56
x <-as.numeric(vt [,menu(names(vt), title="which column is the longitude")])
agb <-as.numeric(vt [,menu(names(vt),  title="which column is your AGB")])
head(agb)
hist(agb)
mean(agb)
vt <- data.frame(agb,vt[ , which(names(vt) %in% c(names(covs[[1]])))])
vt <- na.omit(vt)
rf.mod <- ranger(vt$agb ~ ., data=vt,
importance='permutation', save.memory = T)
rf.mod
head(vt)
head(vt)
vt
head(vt)
names(covs[[1]])
vt <- vtCovs[[2]]
names(vt)
names(covs[[1]])
#make one data frame
vt <- data.frame(ts_rep, ldply(val,data.frame),yrs_rep, ndvi_temp)
head(vt)
names(val)
ndvi_temp
names(ndvi_temp)
head(vt)
yrs_rep
names(yrs_rep)
#make one data frame
vt <- data.frame(ts_rep, yrs_rep,ldply(val,data.frame), ndvi_temp)
head(vt)
names(ts_rep)
names(yrs_rep)
bnames <- c("ndvi","ndvi_mean", "ndvi_min", "ndvi_max","ndvi_sd" , "ndvi_slp")
names(vt) <- c(names(ts_rep),'optional.1', names(yrs_rep), bnames)
vt <- data.frame(agb,vt[ , which(names(vt) %in% c(names(covs[[1]])))])
vt <- na.omit(vt)
head(vt)
rf.mod <- ranger(vt$agb ~ ., data=vt,
importance='permutation', save.memory = T)
rf.mod
head(vt)
#make one data frame
vt <- data.frame(ts_rep, yrs_rep,ldply(val,data.frame), ndvi_temp)
bnames <- c("ndvi","ndvi_mean", "ndvi_min", "ndvi_max","ndvi_sd" , "ndvi_slp")
names(vt) <- c(names(ts_rep),'optional.1', names(yrs_rep), bnames)
head(vt)
#make one data frame
vt <- data.frame(ts_rep, yrs_rep,ldply(val,data.frame), ndvi_temp)
names(vt) <- c(names(ts_rep), names(yrs_rep), bnames)
names(vt)
head(vt)
names(ldply(val,data.frame))
names(ndvi_temp)
ndvi_tmep
ndvi_temp
#make one data frame
vt <- data.frame(ts_rep, yrs_rep,ldply(val,data.frame), ndvi_temp)
bnames=[1]
bnames=[-1]
bnames[-1]
names(vt) <- c(names(ts_rep),'optional.1', names(yrs_rep), bnames[-1])
head(vt)
#make one data frame
vt <- data.frame(ts_rep, yrs_rep,ldply(val,data.frame), ndvi_temp)
head(vt)
length(vt)
names(vt) <- c(names(vt[-17:22]), bnames[-1])
head(vt)
#make one data frame
vt <- data.frame(ts_rep, yrs_rep,ldply(val,data.frame), ndvi_temp)
names(vt[-17:22]
)
names(vt)[-17:22]
names(vt)[-c(17:22)]
#make one data frame
vt <- data.frame(ts_rep, yrs_rep,ldply(val,data.frame), ndvi_temp)
names(vt) <- c(names(vt)[-c(17:22)],bnames[-1])
head(vt)
#make one data frame
vt <- data.frame(ts_rep, yrs_rep,ldply(val,data.frame), ndvi_temp)
names(vt) <- c(names(vt)[-c(17:22)],bnames)
head(vt)
vt <- data.frame(agb,vt[ , which(names(vt) %in% c(names(covs[[1]])))])
vt <- na.omit(vt)
head(vt)
rf.mod <- ranger(vt$agb ~ ., data=vt,
importance='permutation', save.memory = T)
rf.mod
importance(rf)
importance(rf.mod)
summary(lm(ndvi~agb,vt))
summary(lm(agb~vt,vt))
summary(lm(agb~ndvi,vt))
getwd()
setwd(main.dir)
getwd()
write.csv(vt, 'vt.csv',row.names=f)
write.csv(vt, 'vt.csv',row.names=F)
nrow(pt)
length(pt)
nrow(plt)
nrow(plt)*landsat_yrs
nrow(plt)*length(landsat_yrs)
head(vt)
vt1 <- vt[1:nrow(plt),]
rf.mod <- ranger(vt1$agb ~ ., data=vt1,
importance='permutation', save.memory = T)
rf.mod
mean(rf.mod$predictions)
sqrt(2500)
getwd
()
getwd()
write.csv(vt1, 'vt.csv',row.names=F)
summary(lm(agb~ndvi,vt1))
landsat_yrs
nrow(plt)*2
vt1 <- vt[nrow(plt)*2:nrow(plt)*3,]
rf.mod <- ranger(vt1$agb ~ ., data=vt1,
importance='permutation', save.memory = T)
nrow(plt)*2
nrow(plt)*3
head(vt1)
sum(is.na(vt1))
sum(is.na(vt1$agb))
sum(is.na(vt$agb))
nrow(vt)
nrow(plt)*2:nrow(plt)*3
nrow(plt)*2
nrow(plt)*3
vt1 <- vt[2130:3195,]
head(vt1)
tail(vt1)
nrow(plt)
rf.mod <- ranger(vt1$agb ~ ., data=vt1,
importance='permutation', save.memory = T)
rf.mod
plot(mosaic_l[[3]])
#add texture ndvi
tex <- glcm(mosaic_l[[4]], window = c(9,9), shift=c(1,1),
statistics = c("mean", "variance", "homogeneity", "contrast", "entropy"))
library(glcm)
#add texture ndvi
tex <- glcm(mosaic_l[[4]], window = c(9,9), shift=c(1,1),
statistics = c("mean", "variance", "homogeneity", "contrast", "entropy"))
#add texture ndvi
r=mosaic_l[[4]]
tex <- glcm(r, window = c(9,9), shift=c(1,1),
statistics = c("mean", "variance", "homogeneity", "contrast", "entropy"))
tex <- glcm(r$ndvi, window = c(9,9), shift=c(1,1),
statistics = c("mean", "variance", "homogeneity", "contrast", "entropy"))
r$ndvi
plot(tex)
#make one data frame
vt <- data.frame(ts_rep, yrs_rep,ldply(val,data.frame), ndvi_temp, extract(tex, plt))
bnames <- c("ndvi","ndvi_mean", "ndvi_min", "ndvi_max","ndvi_sd" , "ndvi_slp")
names(vt) <- c(names(vt)[-c(17:22)],bnames,c("mean", "variance", "homogeneity", "contrast", "entropy"))
head(vt)
#make one data frame
vt <- data.frame(ts_rep, yrs_rep,ldply(val,data.frame), ndvi_temp)
tex.vt <- extract(tex, plt)
tex.vt <- as.data.frame(extract(tex, plt)
covs <- lapply(mosaic_l, function(x) stack(x,stats_l[[1]]))
bnames <- c("ndvi","ndvi_mean", "ndvi_min", "ndvi_max","ndvi_sd" , "ndvi_slp")
names(vt) <- c(names(vt)[-c(17:22)],bnames,c("mean", "variance", "homogeneity", "contrast", "entropy"))
head(vt)
covs <- lapply(covs, setNames, nm = bnames)
list(covs, vt)
}
vtCovs <- TS_Values(plt,'PH_NFI',landsat_yrs,'LANDSAT',100, aoi)
covs <- vtCovs[[1]]
vt <- vtCovs[[2]]
y <-as.numeric(vt [,menu(names(vt), title="which column is the latitude")]) #11 10 56
tex.vt <- as.data.frame(extract(tex, plt))
#make one data frame
vt <- data.frame(ts_rep, yrs_rep,ldply(val,data.frame), ndvi_temp,
as.data.frame(extract(tex, plt)))
bnames <- c("ndvi","ndvi_mean", "ndvi_min", "ndvi_max","ndvi_sd" , "ndvi_slp")
names(vt) <- c(names(vt)[-c(17:22)],bnames,c("mean", "variance", "homogeneity", "contrast", "entropy"))
head(vt)
#make one data frame
vt <- data.frame(ts_rep, yrs_rep,ldply(val,data.frame), ndvi_temp,
as.data.frame(extract(tex, plt)))
head(vt)
tail(vt)
sum(is.na(tex.vt))
#add texture ndvi
r=mosaic_l[[4]]$ndvi
r
plot(r)
tex <- glcm(r, window = c(3,3), shift=c(1,1),
statistics = c("mean", "variance", "homogeneity", "contrast", "entropy"))
head(tex)
#make one data frame
vt <- data.frame(ts_rep, yrs_rep,ldply(val,data.frame), ndvi_temp,
as.data.frame(extract(tex, plt)))
bnames <- c("ndvi","ndvi_mean", "ndvi_min", "ndvi_max","ndvi_sd" , "ndvi_slp")
names(vt) <- c(names(vt)[-c(17:22)],bnames,c("mean", "variance", "homogeneity", "contrast", "entropy"))
head(vt)
#make one data frame
vt <- data.frame(ts_rep, yrs_rep,ldply(val,data.frame), ndvi_temp,
as.data.frame(extract(tex, plt)))
names(vt)[-c(17:22)]
names(vt) <- c(names(vt)[-c(17:22)],c("mean", "variance", "homogeneity", "contrast", "entropy"),
bnames)
head(vt)
names(vt)
names(vt)[-c(17:22)] <- bnames
#make one data frame
vt <- data.frame(ts_rep, yrs_rep,ldply(val,data.frame), ndvi_temp,
as.data.frame(extract(tex, plt)))
names(vt)[c(17:22)] <- bnames
head(vt)
head(vt)
names(vt)
vt <- data.frame(agb,vt[,c(17:length(vt))])
vt <- na.omit(vt)
head(vt)
vt1 <- vt[1:nrow(plt),]
rf.mod <- ranger(vt1$agb ~ ., data=vt1,
importance='permutation', save.memory = T)
rf.mod
mean(rf.mod$predictions)
importance(rf)
sqrt(rf)
sqrt(1554)
rf.mod
rf.mod$variable.importance
names(vt)
vt <- data.frame(agb,vt[,c(2,8:length(vt))])
#make one data frame
vt <- data.frame(ts_rep, yrs_rep,ldply(val,data.frame), ndvi_temp,
as.data.frame(extract(tex, plt)))
names(vt)[c(17:22)] <- bnames
head(vt)
vt <- data.frame(agb,vt[,c(2,8:length(vt))])
vt <- na.omit(vt)
head(vt)
vt1 <- vt[1:nrow(plt),]
rf.mod <- ranger(vt1$agb ~ ., data=vt1,
importance='permutation', save.memory = T)
rf.mod
head(vt1)
head(vt)
names(vt)
#make one data frame
vt <- data.frame(ts_rep, yrs_rep,ldply(val,data.frame), ndvi_temp,
as.data.frame(extract(tex, plt)))
names(vt)[c(17:22)] <- bnames
head(vt)
vt <- data.frame(agb,vt[,c('ndvi','glcm_mean' ,'glcm_variance',
'glcm_homogeneity', 'glcm_contrast' ,'glcm_entropy' )])
vt <- na.omit(vt)
head(vt)
vt1 <- vt[1:nrow(plt),]
rf.mod <- ranger(vt1$agb ~ ., data=vt1,
importance='permutation', save.memory = T)
rf.mod
save.image("C:/VegetationErosionTrends/RF_vt03_ndviTex.RData")
