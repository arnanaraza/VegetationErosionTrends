library(raster)
load("E:/AGBG/bias_pantrop_7525_bel100_ab-300_10km.RData")
RF
library(ranger)
importance(RF)
load("E:/AGBG/bias_pantrop_1km.RData")
importance(RF)
importance(RF)
load("E:/AGBG/bias_pantrop_6040_bel100_ab-300_10km_2010.RData")
importance(RF)
0.0008888889*3
load("C:/Plot2Map/data/rf1.RData")
rf
load("E:/AGBG/measurementErr.RData")
rf
rf$importance
## PLOTS ----------
plotsFolder = 'D:/AGBG/'
setwd(plotsFolder)
load("E:/AGBG/sd_july3.RData")
mean(uPH$sd)
mean(uCRO$sd)
mean(uSWE$sd)
mean(uIND$sd)
mean(uall$sd)
rf
mean(pltSE$sd)
mean(uPER$sd)
mean(pltBRA$sd)
mean(pltIND$sd)
mean(uBRA$sd)
mean(uTAN$sd)
mean(uGUY$sd)
mean(rf$predicted)
load("E:/AGBG/sd_june25.RData")
mean(uSWE$sd)
head(uSWE)
rf
library(BIOMASS)
library(plyr)
library(dplyr)
library(leaflet)
library(data.table)
library(ranger)
plotSPA <- read.csv('M:/BiomassCCI/data/Spain_EU2_2000m2.csv')
head(plotSPA)
plotRUS <- read.csv('C:/Plot2Map/data/RussiaTree.csv')
plotRUS$id <- factor(plotRUS$id, levels=unique(plotRUS$id), labels=seq_along(nrow(plotRUS)))
xyRUS <- read.csv('C:/Plot2Map/data/RussiaTreeXY.csv')
xyRUS$id <- factor(xyRUS$id, levels=unique(xyRUS$id), labels=seq_along(nrow(xyRUS)))
regRUS <- 'Europe'
plotCRO <- read.csv('M:/BiomassCCI/data/Croatia_EU4_600m2.csv')
plotCRO$id <- factor(plotCRO$id, levels=unique(plotCRO$id), labels=seq_along(nrow(plotCRO)))
xyCRO <- read.csv('M:/BiomassCCI/data/Croatia_EU4_XY.csv')
xyCRO$id <- factor(xyCRO$id, levels=unique(xyCRO$id), labels=seq_along(nrow(xyCRO)))
regCRO <- 'Europe'
plotPER <- read.csv('M:/BiomassCCI/data/Peru_SAM4_1500m2.csv')
plotPER$id <- factor(plotPER$id, levels=unique(plotPER$id), labels=seq_along(nrow(plotPER)))
xyPER <- read.csv('M:/BiomassCCI/data/Peru_SAM4_XY.csv')
xyPER$id <- factor(xyPER$id, levels=unique(xyPER$id), labels=seq_along(nrow(xyPER)))
regPER <- 'SouthAmericaTrop'
plotGUY <- read.csv('M:/BiomassCCI/data/Guyana_SAM_1200m2.csv')
plotGUY$id <- factor(plotGUY$id, levels=unique(plotGUY$id), labels=seq_along(nrow(plotGUY)))
xyGUY <- read.csv('M:/BiomassCCI/data/Guyana_XY.csv')
xyGUY$id <- factor(xyGUY$id, levels=unique(xyGUY$id), labels=seq_along(nrow(xyGUY)))
regGUY <- 'SouthAmericaTrop'
plotIND <- read.csv('M:/BiomassCCI/data/India_10000m2.csv')
plotIND$id <- factor(plotIND$id, levels=unique(plotIND$id), labels=seq_along(nrow(plotIND)))
xyIND <- read.csv('M:/BiomassCCI/data/India_XY.csv')
xyIND$id <- factor(xyIND$id, levels=unique(xyIND$id), labels=seq_along(nrow(xyIND)))
regIND <- 'India'
plotPH <- read.csv('M:/BiomassCCI/data/Philippines_5000m2.csv')
plotPH$id <- factor(plotPH$id, levels=unique(plotPH$id), labels=seq_along(nrow(plotPH)))
xyPH <- read.csv('M:/BiomassCCI/data/Philippines_XY.csv')
xyPH$id <- factor(xyPH$id, levels=unique(xyPH$id), labels=seq_along(nrow(xyPH)))
regPH <- 'SouthEastAsiaTrop'
plotBRA <- read.csv('M:/BiomassCCI/data/Brazil_ZZ_6680m2.csv')
plotBRA$id <- factor(plotBRA$id, levels=unique(plotBRA$id), labels=seq_along(nrow(plotBRA)))
xyBRA <- read.csv('M:/BiomassCCI/data/Brazil_ZZ_XY.csv')
xyBRA$id <- factor(xyBRA$id, levels=unique(xyBRA$id), labels=seq_along(nrow(xyBRA)))
regBRA <- 'SouthAmericaTrop'
plotSPA <- read.csv('M:/BiomassCCI/data/Spain_EU2_2000m2.csv')
plotSPA$id <- factor(plotSPA$id, levels=unique(plotSPA$id), labels=seq_along(nrow(plotSPA)))
xySPA <- read.csv('M:/BiomassCCI/data/Spain_EU2_XY.csv')
xySPA$id <- factor(xySPA$id, levels=unique(xySPA$id), labels=seq_along(nrow(xySPA)))
plotSWE <- read.csv('M:/BiomassCCI/data/Sweden_EU1_153m2.csv')
plotSWE$id <- factor(plotSWE$id, levels=unique(plotSWE$id), labels=seq_along(nrow(plotSWE)))
xySWE <- read.csv('M:/BiomassCCI/data/Sweden_EU1_XY.csv')
xySWE$id <- factor(xySWE$id, levels=unique(xySWE$id), labels=seq_along(nrow(xySWE)))
regSWE <- 'Europe'
plotTAN <- read.csv('M:/BiomassCCI/data/Tanzania_SAM2_10000m2.csv')
plotTAN$id <- factor(plotTAN$id, levels=unique(plotTAN$id), labels=seq_along(nrow(plotTAN)))
xyTAN <- read.csv('M:/BiomassCCI/data/Tanzania_XY.csv')
xyTAN$id <- factor(xyTAN$id, levels=unique(xyTAN$id), labels=seq_along(nrow(xyTAN)))
regTAN <- 'AfricaTrop'
MeasurementErr <- function(plot=plotIND, xy=xyIND, region='India'){
plot <- subset(plot, diameter>=10) #filter those above 10cm in diameter
#taxonomy correction
tax <- correctTaxo(genus = plot$genus, species = plot$species)
plot$genus <- tax$genusCorrected
plot$species <- tax$speciesCorrected
#get wood density
wd <- getWoodDensity(genus = plot$genus,
species = plot$species,
stand = plot$id, region=region)
plot$wd <- wd$meanWD
plot$sd.wd<- wd$sdWD
#compute local HD model / input your own H data if you have
if("height" %in% colnames(plot)){
print('using actual height data...')
}else{
print('using HDmodel...')
HDmodel <- modelHD(D = NouraguesHD$D, H = NouraguesHD$H,
method='weibull',  useWeight = TRUE)
dataHlocal <- retrieveH(D = plot$diameter, model = HDmodel)
plot$height <- dataHlocal$H
}
#run MC simulation
if("height" %in% colnames(plot)){
mc <- by(plot, plot$id,
function(x) AGBmonteCarlo(D = x$diameter, WD = x$wd, errWD = x$sd.wd,
H = x$height, errH = x$height*0.3, Dpropag ='chave2004'),simplify = F)  #assumes 30% height error
}else{
mc <- by(plot, plot$id,
function(x) AGBmonteCarlo(D = x$diameter, WD = x$wd, errWD = x$sd.wd,
HDmodel = HDmodel, Dpropag = "chave2004"),simplify = F)}
#get agb and sd
agb <- unlist(sapply(mc, "[", 1))
sd <- unlist(sapply(mc, "[", 3))
#add XY
plot.fin <- left_join(plot, xy, by = c('id' = 'id')) #needs full to avoid gaps
#remove unecessaries
plot.fin <- plot.fin[,c("id","x","y", 'size')] # retain columns of interest
#summarize per plot and add key results
plot.fin$x <- as.numeric(plot.fin$x)
plot.fin$y <- as.numeric(plot.fin$y)
plot.fin <- plot.fin %>% group_by(id) %>% summarise_all(funs(mean))
#scale values per ha
agb <- agb / (plot.fin$size/10000)
sd <- sd / (plot.fin$size/10000)
plot.fin$agb <- agb
plot.fin$sd <- sd
plot.fin <- as.data.frame(plot.fin[,c("id","x","y", 'agb', 'sd', 'size')]) # retain columns of interest
plot.fin$size <- plot.fin$size / 10000
names(plot.fin) <- c('pltID', 'POINT_X', 'POINT_Y',
'AGB_T_HA', 'sdTree','SIZE_HA')
plot.fin <- subset(plot.fin, !is.na(plot.fin$sdTree))
return(plot.fin)
}
uSWE <- MeasurementErr(plotSWE, xySWE, regSWE) # ok
coordinates(uSWE) <- ~POINT_X+POINT_Y
uSWE@proj4string =CRS("+proj=utm +zone=33 +datum=WGS84")
uSWE <- spTransform(uSWE, CRS("+proj=longlat +datum=WGS84"))
uSWE <- as.data.frame(uSWE)[, c('pltID', 'POINT_X', 'POINT_Y',
'AGB_T_HA', 'sdTree','SIZE_HA')]
uCRO <- MeasurementErr(plotCRO, xyCRO, regCRO) #ok
uPER <- MeasurementErr(plotPER, xyPER, regPER) #ok
uGUY <- MeasurementErr(plotGUY, xyGUY, regGUY) #ok
uIND <- MeasurementErr(plotIND, xyIND, regIND) #ok
uPH  <- MeasurementErr(plotPH, xyPH, regPH) #ok
uBRA <- MeasurementErr(plotBRA, xyBRA, regBRA) #ok
uTAN <- MeasurementErr(plotTAN, xyTAN, regTAN) #ok
uRUS <- MeasurementErr(plotRUS, xyRUS, regRUS) #ok
uSPA <- MeasurementErr(plotSPA, xySPA, regCRO) #ok
mean(uSPA$AGB_T_HA)
mean(uSPA$sdTree)
#plots open
plots0 <- read.csv('M:/AGBG/ValidationData_final.csv')
eu2=subset(plots0, plots0$CODE=='EU2')
mean(eu2$AGB_T_HA)
ul <- list(uCRO, uPER, uGUY, uIND, uPH, uBRA, uSWE, uTAN, uRUS)
ul <- lapply(ul, setNames, nm = c( "id"   ,"x",    "y",    "agb"  ,"sd",   "size"))
plt <- list(plotCRO, plotPER,plotGUY, plotIND,plotPH, plotBRA,plotSWE, plotTAN, plotRUS)
PostUncertainty <- function(df, plot){
df$fez <- as.factor(plot$fez[1])
df$gez <- as.factor(plot$gez[1])
#add plot tally
c <- as.data.frame(plot %>%
group_by(id) %>%
tally())
df$id <- as.factor(df$id)
df$size <- df$size*10000
c$id <- as.factor(c$id)
cu <-  left_join(df, c, by = c('id' = 'id'))
return(cu)
}
um <- lapply (1:length(ul), function(x) PostUncertainty(ul[[x]], plt[[x]]))
uall <- ldply (um, data.frame)
uall$agb <- round(uall$agb,2)
uall$sd <- round(uall$sd,2)
extra <- read.csv('M:/BiomassCCI/data/Tier1_ME_SD.csv')[,-7]
extra1 <- read.csv('E:/AGBG/data/cofor_measurementErr.csv')
uall1 <- rbind(uall,extra, extra1)
uall1$gez  <- as.character(uall1$gez )
uall1$gez <- ifelse(uall1$gez == 'subtropical', 'Subtropical', uall1$gez)
uall1$gez <- ifelse(uall1$gez == 'tropical', 'Tropical', uall1$gez)
uall1$gez <- ifelse(uall1$gez == 'boreal', 'Boreal', uall1$gez)
uall1$gez <- ifelse(uall1$y > 44 & uall1$y < 58, 'Temperate', uall1$gez)
#uall1$gez <- ifelse(uall1$y > 59, 'Boreal', uall1$gez)
uall1$gez <- ifelse(is.na(uall1$gez), 'Tropical', uall1$gez)
uall1$gez  <- as.factor(uall1$gez)
unique(uall1$gez)
#test relationships
print(summary(lm(sd ~ agb + size + gez, data=uall1)))
#df <- uall[,c(4,5,6,8,9)]
df1 <- na.omit(uall1[,c(2,3,4,5,6,8)])
#df1 <- subset(df1, df1$gez == 'Temperate')
rf1 <- ranger(sd ~ ., data=df1,importance = 'permutation')
rf1
importance(rf1)
set.seed(123)
#plots open
plots0 <- read.csv('M:/AGBG/ValidationData_final.csv')
names(plots0)
pltSE <- plots0[,c(5,6,7,10,13)]
names(pltSE) <- c("x","y","agb",  "size", "gez" )
#convert size to m2
pltSE <- na.omit(pltSE)
pltSE$size <- pltSE$size * 10000
pred <- predict(rf, pltSE)[[1]]
pred <- predict(rf1, pltSE)[[1]]
pltSE$sd <- pred
hist(pltSE$sd)
mean(pltSE$sd)
load("C:/Plot2Map/data/rf1.RData")
pltSE <- plots0[,c(7,10,13)]
names(pltSE) <- c("agb",  "size", "gez" )
pltSE <- na.omit(pltSE)
pltSE$gez = factor(pltSE$gez,
levels = c("Boreal","Subtropical","Temperate","Tropical"))
pred <- predict(rf, pltSE)
library(randomForest)
pred <- predict(rf, pltSE)
pltSE$sd <- pred
hist(pltSE$sd)
mean(pltSE$sd)
pltSE$size <- pltSE$size * 10000
pred <- predict(rf, pltSE)
pltSE$sd <- pred
hist(pltSE$sd)
mean(pltSE$sd)
head(pltSE)
tail(pltSE)
max(pltSE)
max(pltSE$sd)
pred <- predict(rf1, pltSE)[[1]]
pltSE <- plots0[,c(5,6,7,10,13)]
names(pltSE) <- c("x","y","agb",  "size", "gez" )
pltSE1 <- plots0[,c(5,6,7,10,13)]
names(pltSE1) <- c("x","y","agb",  "size", "gez" )
pltSE1 <- plots0[,c(5,6,7,10,13)]
names(pltSE1) <- c("x","y","agb",  "size", "gez" )
pltSE1 <- na.omit(pltSE1)
pred1 <- predict(rf1, pltSE)[[1]]
pltSE1 <- na.omit(pltSE1)
pred1 <- predict(rf1, pltSE)[[1]]
pred1 <- predict(rf1, pltSE1)[[1]]
pltSE$sd <- pred1
pltSE1$sd <- pred1
hist(pltSE1$sd)
mean(pltSE1$sd)
max(pltSE1$sd)
uall1 <- rbind(uall1)
uall1$gez  <- as.character(uall1$gez )
uall1$gez <- ifelse(uall1$gez == 'subtropical', 'Subtropical', uall1$gez)
uall1$gez <- ifelse(uall1$gez == 'tropical', 'Tropical', uall1$gez)
uall1$gez <- ifelse(uall1$gez == 'boreal', 'Boreal', uall1$gez)
uall1$gez <- ifelse(uall1$y > 44 & uall1$y < 58, 'Temperate', uall1$gez)
#uall1$gez <- ifelse(uall1$y > 59, 'Boreal', uall1$gez)
uall1$gez <- ifelse(is.na(uall1$gez), 'Tropical', uall1$gez)
uall1$gez  <- as.factor(uall1$gez)
unique(uall1$gez)
#df <- uall[,c(4,5,6,8,9)]
df1 <- na.omit(uall1[,c(4,5,6,8)])
rf1
rf1
importance(rf1)
pred1 <- predict(rf1, pltSE)[[1]]
pltSE <- na.omit(pltSE)
pred1 <- predict(rf1, pltSE)[[1]]
pltSE$sd <- pred1
hist(pltSE$sd)
max(pltSE$sd)
#df <- uall[,c(4,5,6,8,9)]
df1 <- na.omit(uall1[,c(4,5,6,8)])
#df1 <- subset(df1, df1$gez == 'Temperate')
rf1 <- ranger(sd ~ ., data=df1,importance = 'permutation')
rf1
importance(rf1)
pred1 <- predict(rf1, pltSE)[[1]]
pltSE$sd <- pred1
hist(pltSE$sd)
max(pltSE$sd)
mean(pltSE$sd)
set.seed(123)
#df <- uall[,c(4,5,6,8,9)]
df1 <- na.omit(uall1[,c(2,3,4,5,6,8)])
#df1 <- subset(df1, df1$gez == 'Temperate')
rf1 <- ranger(sd ~ ., data=df1,importance = 'permutation')
rf1
importance(rf1)
min(pltSE$sd)
rf1
sqrt(23)
uall1 <- rbind(uall,extra, extra1)
uall1$gez  <- as.character(uall1$gez )
uall1$gez <- ifelse(uall1$gez == 'subtropical', 'Subtropical', uall1$gez)
uall1$gez <- ifelse(uall1$gez == 'tropical', 'Tropical', uall1$gez)
uall1$gez <- ifelse(uall1$gez == 'boreal', 'Boreal', uall1$gez)
uall1$gez <- ifelse(uall1$y > 44 & uall1$y < 58, 'Temperate', uall1$gez)
#uall1$gez <- ifelse(uall1$y > 59, 'Boreal', uall1$gez)
uall1$gez <- ifelse(is.na(uall1$gez), 'Tropical', uall1$gez)
uall1$gez  <- as.factor(uall1$gez)
unique(uall1$gez)
#df <- uall[,c(4,5,6,8,9)]
df1 <- na.omit(uall1[,c(2,3,4,5,6,8)])
#df1 <- subset(df1, df1$gez == 'Temperate')
rf1 <- ranger(sd ~ ., data=df1,importance = 'permutation')
rf1
importance(rf1)
rf1$prediction.error
pltSE1 <- plots0[,c(7,10,13)]
names(pltSE1) <- c("agb",  "size", "gez" )
#df <- uall[,c(4,5,6,8,9)]
df1 <- na.omit(uall1[,c(4,5,6,8)])
#df1 <- subset(df1, df1$gez == 'Temperate')
rf1 <- ranger(sd ~ ., data=df1,importance = 'permutation')
rf1
pltSE <- plots0[,c(7,10,13)]
names(pltSE) <- c("agb",  "size", "gez" )
pltSE <- na.omit(pltSE)
pltSE$gez = factor(pltSE$gez,
levels = c("Boreal","Subtropical","Temperate","Tropical"))
pltSE <- na.omit(pltSE)
#convert size to m2
pltSE$size <- pltSE$size * 10000
pred1 <- predict(rf1, pltSE)[[1]]
pred1 <- mean(predict(rf1, pltSE)[[1]])
mean(predict(rf1, pltSE)[[1]])
#df <- uall[,c(4,5,6,8,9)]
df1 <- na.omit(uall1[,c(2,3,4,5,6,8)])
#df1 <- subset(df1, df1$gez == 'Temperate')
rf1 <- ranger(sd ~ ., data=df1,importance = 'permutation')
rf1
uSWE
head(uSWE)
rf1$importance.mode
importance(rf)
save.image("E:/AGBG/RF_SDTree_v2.RData")
library(plyr)
library(dplyr)
pDir <- "E:/GAMMA MAPS/ESACCI-BIOMASS-L4-AGB-MERGED-100m-2018-fv1.0"
TS_Values <- function(plt=plt,country='AFR',yrs=landsat_yrs,satellite='LANDSAT',rsl=100,aoi=aoi){
# mosaic and make vrt
TS <- function(country, yr, satellite){
folder_dir <- paste0(country,'_',yr,'_',rsl,'m')
setwd(paste0(main.dir, 'intermediate/',folder_dir))
r_files <- list.files(getwd(), satellite)
r_files <- r_files[!grepl('vrt|aux', r_files)]
fname <- paste0(folder_dir,'_',satellite,".vrt")
gdalbuildvrt(gdalfile = r_files, # uses all tiffs in the current folder
output.vrt = fname, overwrite=T)
brick(fname)
}
# raster brick of all block data at regional scale
mosaic_l <- lapply(landsat_yrs, function(x) TS(country,x, satellite))
if(satellite == 'LANDSAT'){
bnames <- c('swir2','swir1','nir','red','nbr','ndvi','ndmi')
}
mosaic_l <- lapply(mosaic_l, setNames, nm = bnames)   #stack of aoi yearly mosaic!
mosaic_l <- lapply(mosaic_l, function(x) crop(x, aoi))
mosaic_l <- lapply(mosaic_l, function(x) mask(x, aoi))
#fun <- function(x) { x[x==0] <- NA; return(x) }
#asdf <- lapply(mosaic_l, function(x) calc(x,fun)) ######!!!!!!!!
#plot-level valuetable assembly
val <- lapply(1:length(mosaic_l),  #should extract all years for all points!
function(x) extract(mosaic_l[[x]], plt))
yrs_rep <- do.call(rbind, replicate(nrow(plt), coredata(as.data.frame(landsat_yrs)),
simplify = FALSE))
ts_rep <- do.call(rbind, replicate(length(mosaic_l),
coredata(plt), simplify = FALSE))
#add temporal covs of plot time series data
YearlyStack <- function(r_list,b){
bnd <- lapply(r_list, function(x) stack(x[[b]]))
bnd1 <- do.call(stack, bnd)
nc <- detectCores()
cl <- makeCluster(nc-1)
registerDoParallel(cl, nc)
stat <- foreach(i=1:nrow(aoi), .combine='merge', .errorhandling = 'remove',
.packages='raster', .export='aoi') %dopar% {
bnd_s <- crop(bnd1, aoi[i,]) ###!!!
time <- 1:nlayers(bnd_s)
lmod <- function(x) { lm(x ~ time)$coefficients[2] }
stack(calc(bnd_s, fun = mean, na.rm = T),calc(bnd_s, fun = min, na.rm = T),
calc(bnd_s, fun = max, na.rm = T),calc(bnd_s, fun = sd, na.rm = T),
calc(bnd_s, fun = lmod)) ### too much NA pixels!
}
stopCluster(cl)
names(stat)
if (b==5){names(stat) <- c('nbr_mean', 'nbr_min', 'nbr_max', 'nbr_sd','nbr_slp')}
if(b==6){names(stat) <- c('ndvi_mean', 'ndvi_min', 'ndvi_max', 'ndvi_sd', 'ndvi_slp')}
if(b==7){names(stat) <- c('nbmi_mean', 'ndmi_min', 'ndmi_max', 'ndmi_sd', 'ndmi_slp')}
return(stat)
}
start.time <- Sys.time()
stats_l <- lapply(5:7, function(x) YearlyStack(mosaic_l,x)) #stats of nbr,ndvi,ndmi = 3 Rstack with 5 ras!
end.time <- Sys.time()
print(end.time - start.time)
nbr_temp <- do.call(rbind, replicate(length(landsat_yrs), coredata(extract(stats_l[[1]], plt)),
simplify = FALSE))
ndvi_temp <- do.call(rbind, replicate(length(landsat_yrs), coredata(extract(stats_l[[2]], plt)),
simplify = FALSE))
ndmi_temp <- do.call(rbind, replicate(length(landsat_yrs), coredata(extract(stats_l[[3]], plt)),
simplify = FALSE))
#make one data frame
vt <- data.frame(ts_rep, ldply(val,data.frame),yrs_rep,
nbr_temp,ndvi_temp,ndmi_temp)
# lon <- init(mosaic_l[[1]][[1]], 'x')
#lat <- init(mosaic_l[[1]][[1]], 'y')
#mosaic_l <- lapply(mosaic_l, function(x) stack(x, lon, lat))
covs <- lapply(mosaic_l, function(x)
stack(x,stats_l[[1]],stats_l[[2]],stats_l[[3]]))
bnames <- c("swir2","swir1","nir","red","nbr","ndvi",  "ndmi",
"nbr_mean", "nbr_min", "nbr_max","nbr_sd" , "nbr_slp",
"ndvi_mean", "ndvi_min", "ndvi_max","ndvi_sd" , "ndvi_slp",
"nbmi_mean", "ndmi_min", "ndmi_max", "ndmi_sd" , "ndmi_slp")
covs <- lapply(covs, setNames, nm = bnames)
list(covs, vt)
}
#if (!require("pacman")) install.packages("pacman")
pacman::p_load(rgdal,sf,raster,sf,plyr,dplyr,cptcity,bfast,devtools,remotes,zoo,
rgee,foreach,doParallel,rlist,gdalUtils,ranger)
load("C:/VegetationErosionTrends/RF_vt03_ndviTex.RData")
# global variables
main.dir <- 'C:/VegetationErosionTrends/'
setwd(main.dir)
pacman::p_load(rgdal,sf,raster,sf,plyr,dplyr,cptcity,bfast,devtools,remotes,zoo,
rgee,foreach,doParallel,rlist,gdalUtils,ranger)
rf.mod
rf.mod$variable.importance
