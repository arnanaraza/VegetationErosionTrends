newdf <- subset(newdf, !is.na(newdf$aspect))
newdf <- subset(newdf, !is.na(newdf$varTot))
newdf <- subset(newdf, !is.na(newdf$tc))
newdf <- subset(newdf, !is.na(newdf$resid))
# pixel-level RF bias
RF1 <- ranger(newdf$resid ~ ., data=newdf[,c('sdMap','mapAGB','slope', 'aspect')],
keep.inbag = T,case.weights = 1/newdf$varTot,
importance='permutation', save.memory = T)
RF1
importance(RF1)
# pixel-level RF bias
RF1 <- ranger(newdf$resid ~ ., data=newdf[,c('sdMap','mapAGB','slope', 'aspect')],
keep.inbag = T,#case.weights = 1/newdf$varTot,
importance='permutation', save.memory = T)
RF1
importance(RF1)
resultsFolder <- 'M:/AGBG/ResultsDB_CCI_10km'
newdf <- get(load(paste0(resultsFolder,'/agg01_0.1_5_all.Rdata')))
newdf$resid <-  newdf$mapAGB - newdf$plotAGB_10
newdf <- subset(newdf, !is.na(newdf$aspect))
newdf <- subset(newdf, !is.na(newdf$varTot))
newdf <- subset(newdf, !is.na(newdf$tc))
resultsFolder <- 'M:/AGBG/ResultsDB_CCI_10km_all'
newdf <- get(load(paste0(resultsFolder,'/agg01_0.1_5_all.Rdata')))
newdf <- subset(newdf, !is.na(newdf$aspect))
newdf <- subset(newdf, !is.na(newdf$varTot))
newdf <- subset(newdf, !is.na(newdf$tc))
newdf$resid <-  newdf$mapAGB - newdf$plotAGB_10
newdf <- subset(newdf, !is.na(newdf$aspect))
newdf <- subset(newdf, !is.na(newdf$varTot))
newdf <- subset(newdf, !is.na(newdf$tc))
# pixel-level RF bias
RF1 <- ranger(newdf$resid ~ ., data=newdf[,c('sdMap','mapAGB','slope', 'aspect', 'tc')],
keep.inbag = T,#case.weights = 1/newdf$varTot,
importance='permutation', save.memory = T)
RF1
importance(RF1)
# pixel-level RF bias
RF1 <- ranger(newdf$resid ~ ., data=newdf[,c('sdMap','mapAGB','slope', 'aspect', 'tc')],
keep.inbag = T,case.weights = 1/newdf$varTot,
importance='permutation', save.memory = T)
RF1
importance(RF1)
RF2 <- train(newdf[,c('sdMap','mapAGB','slope', 'aspect', 'tc')], newdf$resid,
method = "ranger",
trControl = trainControl(method="LOOCV"),
importance = "permutation",
case.weights = 1/newdf$varTot,keep.inbag = T)
install.packages("pacman")
se = read.csv('M:/AGBG/data/se.csv')
library(randomForest)
library(ranger)
RF1 <- ranger(se$cv ~ ., data=newdf[,c('plot','pixel')])
RF1 <- ranger(se$cv ~ ., data=se[,c('plot','pixel')])
RF1
LM1 <- summary(lm(se ~ plot+pixel, data=se))
LM1 <- summary(lm(cv ~ plot+pixel, data=se))
LM1
LM1 <- nls(cv ~ plot+pixel, data=se)
RF1
RF1 <- ranger(se$cv ~ ., data=se[,c('plot','pixel')], importance='permutation')
importance(RF1)
se
4/9
?extract
library(raster)
?extract
150427 -163399
150427 /163399
143885  /163399
150427/163399
143885/163399
load("M:/AGBG/err10.RData")
plot(m1)
plot(m2)
plot(m)
plot(m3)
load("M:/AGBG/march92020.RData")
save.image("M:/AGBG/bias01.RData")
library(rgee)
install.packages('sf')
install.packages('remotes')
library(rgee)
remotes::install_github("r-spatial/rgee")
library(reticulate)
remotes::install_github("r-spatial/rgee")
install.packages("Rcpp")
library(BIOMASS)
?AGBmonteCarlo
AGBmonteCarlo
330*7
2310/2
350*7
2450-2310
library(rgee)
ee_Initialize(email='arnanaraza2006@gmail.com',drive = TRUE)
## Download satellite data @block polygons using AOI and year filter --  #ALOS, LANDSAT8, LANDSAT7
DL <- function(year, aoi, satellite, outdir, bands, rsl){
# Get data
if (satellite == 'ALOS'){
sat.col <-ee$ImageCollection("JAXA/ALOS/PALSAR/YEARLY/SAR") #2011-2015 missing
bands <- bands
}
else if (satellite == 'LANDSAT8'){
sat.col <-ee$ImageCollection("LANDSAT/LC08/C01/T1_SR")
}
else if (satellite == 'LANDSAT7'){
sat.col <-ee$ImageCollection("LANDSAT/LE07/C01/T1_SR")
}
else if (satellite == 'SENTINEL5P'){
sat.col <-ee$ImageCollection("COPERNICUS/S5P/OFFL/L3_NO2")
}
# Use block polys Define a region of interest with sf
aoi_sf <- st_as_sf(aoi)
ee_roi <- aoi_sf %>%
st_geometry() %>%
sf_as_ee()
# Year filter
year2 <- as.character(year+1)
start <- ee$Date(paste0(year,"-01-01"))
end <- ee$Date(paste0(year2,"-01-01"))
filter <- sat.col$filterBounds(ee_roi)$filterDate(start,end)
# Composite
img <- filter$select(bands)$mean()
# Block-level download
dir.create(file.path(main.dir, outdir))
outdir <- paste0(main.dir,outdir)
AGB.list <- list()
for (i in 1:length(aoi)){
dsn <-paste0(outdir,  bands, '_', i)
a <- aoi[i,]@bbox
g <- c(a[1],a[2],a[3],a[4])
geometry <- ee$Geometry$Rectangle(
coords = g,
proj = "EPSG:4326",
geodesic = FALSE
)
ee_raster <- ee_as_raster(
image = img,
region = geometry,
dsn = dsn,
scale = rsl,
via = "getInfo",
maxPixels=1e+100)
# plot(ee_raster)
AGB.list <- c(AGB.list, ee_raster)
}
return(AGB.list)
}
out.dir <- 'intermediate/AUS_2009_100m/'
out.dir <- 'intermediate/AUS_2009_100m/'
out.dir <- 'intermediate/AUS_2009_100m/'
out.dir <- 'intermediate/AUS_2009_100m/'
aoi
# packages
if (!require("pacman")) install.packages("pacman")
pacman::p_load(rgdal,sf,raster,sf,dplyr,cptcity,rgee)
## Download satellite data @block polygons using AOI and year filter --  #ALOS, LANDSAT8, LANDSAT7
DL <- function(year, aoi, satellite, outdir, rsl){
# Year filter
year2 <- as.character(year+1)
start <- ee$Date(paste0(year,"-01-01"))
end <- ee$Date(paste0(year2,"-01-01"))
# Use block polys Define a region of interest with sf
aoi_sf <- st_as_sf(aoi)
st_crs(aoi_sf) <-  4326
ee_roi <- aoi_sf %>%
st_geometry() %>%
sf_as_ee()
# Get data
if (satellite == 'ALOS'){
sat.col <-ee$ImageCollection("JAXA/ALOS/PALSAR/YEARLY/SAR") #2011-2015 missing
filter <- sat.col$filterBounds(ee_roi)$filterDate(start,end)
b <- c("HH", "HV")
img <- filter$select(b)$mean()
}
else if (satellite == 'LANDSAT'){
# Filter out poor quality pixels
getQABits <- function(image, qa) {
qa <- sum(2^(which(rev(unlist(strsplit(as.character(qa), "")) == 1))-1))
image$bitwiseAnd(qa)$lt(1)
}
# bnames <- c('swir2','swir1','nir','red')
if (year >= 2013){
sat.col <-ee$ImageCollection("LANDSAT/LC08/C01/T1_SR")
b <- c("B7", "B6", "B5", "B4")
filter <- sat.col$filterBounds(ee_roi)$filterDate(start,end)
bnds <- filter$select(b)$median()
l8_clean <- function(img) {
ndvi_values <- img$normalizedDifference(c("B5","B4"))
ndwi_values <- img$normalizedDifference(c("B5","B6"))
ndwi_values1 <- img$normalizedDifference(c("B5","B7"))
qa <- img$select("pixel_qa")
quality_mask <- getQABits(qa, "00000100001")
ndvi_values %>%
ee$Image$updateMask(quality_mask) %>%
ee$Image$copyProperties(img, list("system:time_start"))
ndwi_values %>%
ee$Image$updateMask(quality_mask) %>%
ee$Image$copyProperties(img, list("system:time_start"))
ndwi_values1 %>%
ee$Image$updateMask(quality_mask) %>%
ee$Image$copyProperties(img, list("system:time_start"))
list(ndvi_values,ndwi_values,ndwi_values1)}
# Create a yearly composite
ndvi <- sat.col$filterBounds(ee_roi)$filterDate(start,end)$map(l8_clean)[[1]]$median()
ndwi <- sat.col$filterBounds(ee_roi)$filterDate(start,end)$map(l8_clean)[[2]]$median()
ndwi1 <- sat.col$filterBounds(ee_roi)$filterDate(start,end)$map(l8_clean)[[3]]$median()
img <- ee$Image(bnds)$addBands(ndvi)
img <- ee$Image(img)$addBands(ndwi)
img <- ee$Image(img)$addBands(ndwi1)
}
else if (year >= 1999){
sat.col1 <- ee$ImageCollection("LANDSAT/LE07/C01/T1_SR")
b1 <- c("B7", "B5", "B4", "B3")
filter1 <- sat.col1$filterBounds(ee_roi)$filterDate(start,end)
img1 <- filter1$select(b1, bnames)$median()
}
else if (year < 2012){
sat.col2 <-ee$ImageCollection("LANDSAT/LT05/C01/T1_SR")
b2 <- c("B7", "B5", "B4", "B3")
filter2 <- sat.col2$filterBounds(ee_roi)$filterDate(start,end)
img2 <- filter2$select(b2, bnames)$median()
}
if (exists('img') & exists('img1')){
#    img <-  ee$ImageCollection(list(img,img1))$mean()
img <- img
}
else if (exists('img1') & exists('img2')){
#   img <-  ee$ImageCollection(list(img2,img1))$mean()
img <- img2
}
else if (exists('img')){
img <- img
}
else if (exists('img1')){
img <- img1
}
else if (exists('img2')){
img <- img2
}
}
# Block-level download
dir.create(file.path(main.dir, outdir))
outdir <- paste0(main.dir,outdir)
AGB.list <- list()
for (i in 1:length(aoi)){
dsn <-paste0(outdir,  satellite, '_', i)
a <- aoi[i,]@bbox
g <- c(a[1],a[2],a[3],a[4])
geometry <- ee$Geometry$Rectangle(
coords = g,
proj = "EPSG:4326",
geodesic = FALSE
)
ee_raster <- ee_as_raster(
image = img,
region = geometry,
dsn = dsn,
scale = rsl,
via = "getInfo",
maxPixels=1e+100
)
AGB.list <- c(AGB.list, ee_raster)
}
return(AGB.list)
}
#download RS inputs in raster blocks
nl_yrs <- 2018
aoi <- readOGR('M:/AGBC/data', 'block25_NL') #block polygons
ee_Initialize(email='arnanaraza2006@gmail.com',drive = TRUE)
main.dir <- 'M:/AGBC/'
pacman::p_load(rgdal,sf,raster,sf,dplyr,cptcity,rgee)
ee_Initialize(email='arnanaraza2006@gmail.com',drive = TRUE)
if (!require("pacman")) install.packages("pacman")
pacman::p_load(rgdal,sf,raster,cptcity,rgee,foreach,doParallel)
ee_Initialize(email='arnanaraza2006@gmail.com',drive = TRUE)
# globals
main.dir <- 'D:/RGEE/'
setwd(main.dir)
source(paste0(main.dir,'scripts/MakeBlockPolygon.R'))
## Funciton to download satellite data within polygons from csv/shp
DL <- function(year, aoi, satellite, outdir, rsl){
# Year filter
year2 <- as.character(year+1)
start <- ee$Date(paste0(year,"-01-01"))
end <- ee$Date(paste0(year2,"-01-01"))
# Use block polys Define a region of interest with sf
aoi_sf <- st_as_sf(aoi)
st_crs(aoi_sf) <-  4326
ee_roi <- aoi_sf %>%
st_geometry() %>%
sf_as_ee()
# Get data
if (satellite == 'ALOS'){
sat.col <-ee$ImageCollection("JAXA/ALOS/PALSAR/YEARLY/SAR") #2011-2015 missing
filter <- sat.col$filterBounds(ee_roi)$filterDate(start,end)
b <- c("HH", "HV")
img <- filter$select(b)$mean()
}
else if (satellite == 'LANDSAT'){
# Filter out poor quality pixels
getQABits <- function(image, qa) {
qa <- sum(2^(which(rev(unlist(strsplit(as.character(qa), "")) == 1))-1))
image$bitwiseAnd(qa)$lt(1)}
bnames <- c('swir2', 'swir1', 'nir', 'red', 'pixel_qa')
if (year >= 2013){
b <- c("B7", "B5", "B5", "B4","pixel_qa")
b1 <- c("B7", "B5", "B4", "B3",'pixel_qa')
sat.col0 <-ee$ImageCollection("LANDSAT/LC08/C01/T1_SR")$select(b,bnames)
sat.col1 <- ee$ImageCollection("LANDSAT/LE07/C01/T1_SR")$select(b1,bnames)
sat.col <- sat.col0$merge(sat.col1)}
else if (year < 2013){
b <- c("B7", "B5", "B4", "B3",'pixel_qa')
sat.col1 <- ee$ImageCollection("LANDSAT/LE07/C01/T1_SR")$select(b,bnames)
sat.col0 <-ee$ImageCollection("LANDSAT/LT05/C01/T1_SR")$select(b,bnames)
sat.col <- sat.col0$merge(sat.col1)
} else{print('wrong year')}
# clean the bands and VIs
clean_bnds <- function(img) {
bnds <- img$select(bnames[-5])
qa <- img$select("pixel_qa")
quality_mask <- getQABits(qa, "00000100001")
bnds %>%
ee$Image$updateMask(quality_mask) %>%
ee$Image$copyProperties(img, list("system:time_start"))}
clean_ndvi <- function(img) {
ndvi_values <- img$normalizedDifference(bnames[3:4])
qa <- img$select("pixel_qa")
quality_mask <- getQABits(qa, "00000100001")
ndvi_values %>%
ee$Image$updateMask(quality_mask) %>%
ee$Image$copyProperties(img, list("system:time_start"))}
clean_ndwi <- function(img) {
ndwi_values <- img$normalizedDifference(bnames[c(3,2)])
qa <- img$select("pixel_qa")
quality_mask <- getQABits(qa, "00000100001")
ndwi_values %>%
ee$Image$updateMask(quality_mask) %>%
ee$Image$copyProperties(img, list("system:time_start"))}
clean_ndwi1 <- function(img) {
ndwi_values1 <- img$normalizedDifference(bnames[c(3,1)])
qa <- img$select("pixel_qa")
quality_mask <- getQABits(qa, "00000100001")
ndwi_values1 %>%
ee$Image$updateMask(quality_mask) %>%
ee$Image$copyProperties(img, list("system:time_start"))}
# Create a yearly composite
ndvi <- sat.col$filterBounds(ee_roi)$filterDate(start,end)$map(clean_ndvi)$max()
ndwi1 <- sat.col$filterBounds(ee_roi)$filterDate(start,end)$map(clean_ndwi1)$max()
img <- ee$Image(ndvi)$addBands(ndwi1)
}
# Block-level download
dir.create(file.path(main.dir, outdir))
outdir <- paste0(main.dir,outdir)
r_list <- list()
for (i in 1:length(aoi)){
dsn <-paste0(outdir,  satellite, '_', year,'.tif')
print(dsn)
a <- aoi[i,]@bbox
g <- c(a[1],a[2],a[3],a[4])
geometry <- ee$Geometry$Rectangle(
coords = g,
proj = "EPSG:4326",
geodesic = FALSE)
ee_raster <- ee_as_raster(
image = img,
region = geometry,
dsn = dsn,
scale = rsl,
via = "getInfo",
maxPixels=1e+100)
r_list <- c(r_list, ee_raster)
}
return(r_list)
}
#download RS inputs in raster blocks
landsat_yrs <- c(2000:2018)
#download RS inputs in raster blocks
landsat_yrs <- c(2000:2018)
plt <- read.csv(paste0(main.dir,'data/sample_sites.csv'))
coordinates(plt) <- ~long+lat
aoi <- MakeBlockPolygon(plt, 0.1, 1) #block polygons
### REMOTE SENSING INPUTS DOWNLOADER USING RGEE
# preliminaries... assuming you already installed rgee
rm(list=ls())
if (!require("pacman")) install.packages("pacman")
pacman::p_load(rgdal,sf,raster,cptcity,rgee,foreach,doParallel)
ee_Initialize(email='arnanaraza2006@gmail.com',drive = TRUE)
# global variables
main.dir <- 'D:/RGEE/'
setwd(main.dir)
## Funciton to download satellite data within polygons from csv/shp
DL <- function(year, aoi, satellite, outdir, rsl){
# Year filter
year2 <- as.character(year+1)
start <- ee$Date(paste0(year,"-01-01"))
end <- ee$Date(paste0(year2,"-01-01"))
# Use block polys Define a region of interest with sf
aoi_sf <- st_as_sf(aoi)
st_crs(aoi_sf) <-  4326
ee_roi <- aoi_sf %>%
st_geometry() %>%
sf_as_ee()
# Get ALOS-PALSAR data and take the mean of image collection
if (satellite == 'ALOS'){
sat.col <-ee$ImageCollection("JAXA/ALOS/PALSAR/YEARLY/SAR") #2011-2015 missing
filter <- sat.col$filterBounds(ee_roi)$filterDate(start,end)
b <- c("HH", "HV")
img <- filter$select(b)$mean()
}
# Get Landsat data including overlapping years between two Landsat satellites
else if (satellite == 'LANDSAT'){
# Filter out poor quality pixels
getQABits <- function(image, qa) {
qa <- sum(2^(which(rev(unlist(strsplit(as.character(qa), "")) == 1))-1))
image$bitwiseAnd(qa)$lt(1)}
bnames <- c('swir2', 'swir1', 'nir', 'red', 'pixel_qa')
if (year >= 2013){
b <- c("B7", "B5", "B5", "B4","pixel_qa")
b1 <- c("B7", "B5", "B4", "B3",'pixel_qa')
sat.col0 <-ee$ImageCollection("LANDSAT/LC08/C01/T1_SR")$select(b,bnames)
sat.col1 <- ee$ImageCollection("LANDSAT/LE07/C01/T1_SR")$select(b1,bnames)
sat.col <- sat.col0$merge(sat.col1)}
else if (year < 2013){
b <- c("B7", "B5", "B4", "B3",'pixel_qa')
sat.col1 <- ee$ImageCollection("LANDSAT/LE07/C01/T1_SR")$select(b,bnames)
sat.col0 <-ee$ImageCollection("LANDSAT/LT05/C01/T1_SR")$select(b,bnames)
sat.col <- sat.col0$merge(sat.col1)
} else{print('wrong year')}
# clean the bands and calculate VIs
clean_bnds <- function(img) {
bnds <- img$select(bnames[-5])
qa <- img$select("pixel_qa")
quality_mask <- getQABits(qa, "00000100001")
bnds %>%
ee$Image$updateMask(quality_mask) %>%
ee$Image$copyProperties(img, list("system:time_start"))}
clean_ndvi <- function(img) {
ndvi_values <- img$normalizedDifference(bnames[3:4])
qa <- img$select("pixel_qa")
quality_mask <- getQABits(qa, "00000100001")
ndvi_values %>%
ee$Image$updateMask(quality_mask) %>%
ee$Image$copyProperties(img, list("system:time_start"))}
clean_ndwi <- function(img) {
ndwi_values <- img$normalizedDifference(bnames[c(3,2)])
qa <- img$select("pixel_qa")
quality_mask <- getQABits(qa, "00000100001")
ndwi_values %>%
ee$Image$updateMask(quality_mask) %>%
ee$Image$copyProperties(img, list("system:time_start"))}
clean_ndwi1 <- function(img) {
ndwi_values1 <- img$normalizedDifference(bnames[c(3,1)])
qa <- img$select("pixel_qa")
quality_mask <- getQABits(qa, "00000100001")
ndwi_values1 %>%
ee$Image$updateMask(quality_mask) %>%
ee$Image$copyProperties(img, list("system:time_start"))}
# Create a yearly composite
ndvi <- sat.col$filterBounds(ee_roi)$filterDate(start,end)$map(clean_ndvi)$max()
ndwi1 <- sat.col$filterBounds(ee_roi)$filterDate(start,end)$map(clean_ndwi1)$max()
img <- ee$Image(ndvi)$addBands(ndwi1)
}
# Polygon/Block-level download
dir.create(file.path(main.dir, outdir))
outdir <- paste0(main.dir,outdir)
r_list <- list()
for (i in 1:length(aoi)){
dsn <-paste0(outdir,  satellite, '_', year,'.tif')
print(dsn)
a <- aoi[i,]@bbox
g <- c(a[1],a[2],a[3],a[4])
geometry <- ee$Geometry$Rectangle(
coords = g,
proj = "EPSG:4326",
geodesic = FALSE)
ee_raster <- ee_as_raster(
image = img,
region = geometry,
dsn = dsn,
scale = rsl,
via = "getInfo",
maxPixels=1e+100)
r_list <- c(r_list, ee_raster)
}
return(r_list)
}
#download RS inputs in raster blocks
landsat_yrs <- c(2000:2018)
plt <- read.csv(paste0(main.dir,'data/sample_sites.csv'))
coordinates(plt) <- ~long+lat
source(paste0(main.dir,'scripts/MakeBlockPolygon.R')) #point to square polygon function
aoi <- MakeBlockPolygon(plt, 0.1, 1)
aoi1 <- lapply(landsat_yrs, function(x) DL(x, aoi[1,], 'LANDSAT',
paste0('results/PH_',plt$site[1],'_30m/'),30)) #original 30m resolution
#loop the aoi polygons for ndvi time series
for (i in 1:nrow(aoi)){
lapply(landsat_yrs, function(x) DL(x, aoi[i,], 'LANDSAT',
paste0('results/PH_',plt$site[i],'_100m/'),100)) #resampled to 100m (faster demo)
}
aoi1 <- lapply(landsat_yrs, function(x) DL(x, aoi[1,], 'LANDSAT',
paste0('results/PH_',plt$site[1],'_30m/'),30)) #original 30m resolution
aoi1 <- lapply(landsat_yrs, function(x) DL(x, aoi[1,], 'LANDSAT',
paste0('results/PH_',plt$site[1],'_30m/'),30)) #original 30m resolution
aoi1 <- lapply(landsat_yrs, function(x) DL(x, aoi[1,], 'LANDSAT',
paste0('results/PH_',plt$site[1],'_100m/'),100))  #resampled to 100m (faster demo)
aoi1 <- lapply(landsat_yrs, function(x) DL(x, aoi[1,], 'LANDSAT',
paste0('results/PH_',plt$site[1],'_100m/'),100))  #resampled to 100m (faster demo)
ee_Initialize()
ee_Initialize(email='arnanaraza2006@gmail.com',drive = TRUE)
ee_Initialize(email='arnanaraza2006@gmail.com')#,drive = TRUE)
